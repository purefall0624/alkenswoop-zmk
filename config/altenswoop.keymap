/*
 * Copyright (c) 2020 duckyb
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        tab_esc_ctrl: tab_esc_ctrl {
            compatible = "zmk,behavior-tap-dance";
            label = "TAB_ESC_CTRL";
            #binding-cells = <0>;
            bindings = <&mt LCTRL ESC>, <&kp TAB>;
        };

        gqt: global-quick-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "GLOBAL_QUICK_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            quick-tap-ms = <180>;
            tapping-term-ms = <200>;
            global-quick-tap;
        };

        ltq: ltq {
            compatible = "zmk,behavior-hold-tap";
            label = "LTQ";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            global-quick-tap;
            tapping-term-ms = <200>;
            quick-tap-ms = <180>;
        };

        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            label = "HT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            global-quick-tap;
            flavor = "tap-preferred";
            quick-tap-ms = <100>;
        };

        mtap: mtap {
            compatible = "zmk,behavior-hold-tap";
            label = "MTAP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick-tap-ms = <100>;
            global-quick-tap;
            flavor = "tap-preferred";
        };

        td_mo2_space: td_mo2_space {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_MO2_SPACE";
            #binding-cells = <0>;
            bindings = <&mo 2>, <&kp LCTRL>;
        };

        td_mo2_space_gui: td_mo2_space_gui {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_MO2_SPACE_GUI";
            #binding-cells = <0>;
            bindings = <&mo 2>, <&kp LGUI>;
        };

        td_gf: td_gf {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_GF";
            #binding-cells = <0>;
            bindings = <&kp G>, <&kp F>;
        };
    };

    combos {
        compatible = "zmk,combos";

        capslock {
            bindings = <&kp CAPSLOCK>;
            key-positions = <11 18>;
            layers = <0>;
        };

        shift_minus {
            bindings = <&kp UNDERSCORE>;
            key-positions = <15 17>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <15 18>;
        };

        left_para {
            bindings = <&kp LPAR>;
            key-positions = <12 13>;
        };

        right_para {
            bindings = <&kp RPAR>;
            key-positions = <16 17>;
        };

        left_bkt {
            bindings = <&kp LBKT>;
            key-positions = <2 3>;
        };

        right_bkt {
            bindings = <&kp RBKT>;
            key-positions = <6 7>;
        };

        left_brc {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <22 23>;
        };

        right_brc {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <26 27>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <10 11 12>;
        };

        less_than {
            bindings = <&kp LESS_THAN>;
            key-positions = <25 27>;
        };

        greater_than {
            bindings = <&kp GREATER_THAN>;
            key-positions = <25 28>;
        };

        backsplash {
            bindings = <&kp BACKSLASH>;
            key-positions = <4 5>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <14 15>;
        };

        tidle {
            bindings = <&kp TILDE>;
            key-positions = <5 6>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <3 4>;
        };

        semi {
            bindings = <&kp SEMICOLON>;
            key-positions = <16 17 18>;
        };

        sqt {
            bindings = <&kp SQT>;
            key-positions = <17 18>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <7 8 6>;
        };

        dqt {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <17 18 26>;
        };

        insert {
            bindings = <&kp INS>;
            key-positions = <0 1 8 9>;
        };
    };

    macros {
        m_a_grave: m_a_grave {
            compatible = "zmk,behavior-macro";
            label = "M_A_GRAVE";
            #binding-cells = <0>;
            bindings = <&kp LA(GRAVE) &kp A>;
        };

        m_a_caret: m_a_caret {
            compatible = "zmk,behavior-macro";
            label = "M_A_CARET";
            #binding-cells = <0>;
            bindings = <&kp LA(I) &kp A>;
        };

        m_e_cute: m_e_cute {
            compatible = "zmk,behavior-macro";
            label = "M_E_CUTE";
            #binding-cells = <0>;
            bindings = <&kp LA(E) &kp E>;
        };

        m_e_grave: m_e_grave {
            compatible = "zmk,behavior-macro";
            label = "M_E_GRAVE";
            #binding-cells = <0>;
            bindings = <&kp LA(GRAVE) &kp E>;
        };

        m_e_caret: m_e_caret {
            compatible = "zmk,behavior-macro";
            label = "M_E_CARET";
            #binding-cells = <0>;
            bindings = <&kp LA(I) &kp E>;
        };

        m_ou: m_ou {
            compatible = "zmk,behavior-macro";
            label = "M_OU";
            #binding-cells = <0>;
            bindings = <&kp O &kp LA(GRAVE) &kp U>;
        };

        m_u_caret: m_u_caret {
            compatible = "zmk,behavior-macro";
            label = "M_U_CARET";
            #binding-cells = <0>;
            bindings = <&kp LA(I) &kp U>;
        };

        m_o_caret: m_o_caret {
            compatible = "zmk,behavior-macro";
            label = "M_O_CARET";
            #binding-cells = <0>;
            bindings = <&kp LA(I) &kp O>;
        };

        m_paren_quote: m_paren_quote {
            compatible = "zmk,behavior-macro";
            label = "M_PAREN_QUOTE";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS &kp DOUBLE_QUOTES>;
        };

        m_lt_gt_left: m_lt_gt_left {
            compatible = "zmk,behavior-macro";
            label = "M_LT_GT_LEFT";
            #binding-cells = <0>;
            bindings = <&kp LESS_THAN &kp GREATER_THAN &kp LEFT>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            label = "Base";
            bindings = <
&kp Q        &kp W  &kp E           &kp R           &kp T            &kp Y  &kp U            &kp I        &kp O     &kp P
&kp A        &kp S  &kp D           &kp F           &kp G            &kp H  &ht RIGHT_ALT J  &kp K        &kp L     &kp BSPC
&ht LSHFT Z  &kp X  &ht LEFT_ALT C  &ht LEFT_GUI V  &kp B            &kp N  &kp M            &kp COMMA    &kp FSLH  &ht RSHIFT RET
                    &bootloader     &kp SPACE       &td_mo2_space    &mo 2  &mo 3            &bootloader
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&inc_dec_kp RIGHT_ARROW LEFT>;
        };

        navigation {
            label = "NAV";
            bindings = <
&kp Q             &kp W  &kp E           &kp R        &kp T                &kp Y  &kp U  &kp I        &kp O     &kp P
&kp A             &kp S  &kp D           &kp F        &kp G                &kp H  &kp J  &kp K        &kp L     &kp BSPC
&ht LEFT_SHIFT Z  &kp X  &ht LEFT_ALT C  &ht LCTRL V  &kp B                &kp N  &kp M  &kp COMMA    &kp FSLH  &ht RIGHT_SHIFT ENTER
                         &bootloader     &kp SPACE    &td_mo2_space_gui    &mo 2  &mo 3  &bootloader
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&inc_dec_kp RIGHT LEFT>;
        };

        symbols {
            label = "SYMBOLS";
            bindings = <
&kp N1     &kp N2  &kp N3         &kp N4   &kp N5     &kp N6    &kp N7     &kp N8     &kp N9             &kp N0
&kp A      &kp S   &kp LC(SPACE)  &kp F    &kp G      &kp SEMI  &kp MINUS  &kp EQUAL  &kp SQT            &kp BSPC
&kp LSHFT  &kp X   &kp ESC        &kp DEL  &kp TAB    &kp BSLH  &kp LBKT   &kp DOT    &kp RIGHT_BRACKET  &kp RET
                   &none          &trans   &to 4      &trans    &trans     &none
            >;

            sensor-bindings =
                <&inc_dec_kp RIGHT LEFT>,
                <&inc_dec_kp LG(Z) LG(LS(Z))>;
        };

        french {
            label = "FRENCH";
            bindings = <
&kp F1        &kp F2        &kp F3        &kp F4      &kp F5     &kp F6      &kp F7          &kp F8      &kp F9    &kp F10
&kp CAPSLOCK  &trans        &kp HOME      &kp END     &kp F11    &kp GRAVE   &kp C_PREVIOUS  &kp C_NEXT  &kp UP    &kp RIGHT
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_CLR  &kp F12    &kp C_MUTE  &trans          &kp LEFT    &kp DOWN  &trans
                            &to 0         &trans      &trans     &kp C_PP    &trans          &to 1
            >;

            sensor-bindings =
                <&inc_dec_kp C_PREVIOUS C_NEXT>,
                <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        numpad {
            bindings = <
&kp ESC    &kp Q  &kp W    &kp E      &kp R    &kp T   &kp Y   &kp U  &kp I      &kp O
&kp LSHFT  &kp A  &kp S    &kp D      &kp F    &kp G   &kp H   &kp J  &kp K      &kp L
&kp LCTRL  &kp Z  &kp X    &kp C      &kp V    &kp B   &kp N   &kp M  &kp COMMA  &kp RBKT
                  &kp TAB  &kp SPACE  &mo 5    &trans  &trans  &to 0
            >;

            label = "NUM";
            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOLUME_DOWN>,
                <&inc_dec_kp F14 F15>;
        };

        layer_5 {
            bindings = <
&kp N1  &kp N1  &kp N2  &kp N3  &kp N4     &kp N5  &kp N6  &kp N7  &kp N8  &kp N9
&trans  &trans  &trans  &trans  &trans     &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &kp TAB    &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans     &trans  &trans  &trans
            >;
        };
    };
};
